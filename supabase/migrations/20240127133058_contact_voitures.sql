
create table public.voitures (
    id uuid not null default gen_random_uuid (),
    price real not null,
    year smallint not null,
    kilometrage integer not null,
    image text not null,
    description text null,
    equipment text[] null,
    options text[] null,
    created_at timestamp with time zone not null default now(),
    created_by uuid not null,
    constraint voitures_pkey primary key (id),
    constraint voitures_id_key unique (id),
    constraint voitures_created_by_fkey foreign key (created_by) references employees (id) on update cascade
);

create table public.contacts (
    id bigint generated by default as identity not null,
    first_name text not null,
    last_name text not null,
    email text not null,
    telephone text not null,
    message text not null,
    voiture_id uuid,
    created_at timestamp with time zone not null default now(),
    responded boolean not null default false,
    responded_by uuid,
    constraint contacts_pkey primary key (id),
    constraint contacts_voiture_id_fkey foreign key (voiture_id) references voitures (id) on update cascade on delete set null
);

-- Trigger for generating a random password
-- CREATE OR REPLACE FUNCTION public.password_gen()
--  RETURNS trigger
--  LANGUAGE plpgsql
-- AS $function$
-- BEGIN
--   NEW.password = md5(random()::text);
--   RETURN NEW;
-- END;
-- $function$;

-- CREATE TRIGGER password_generation BEFORE INSERT ON public.employees FOR EACH ROW EXECUTE FUNCTION password_gen();
-- Trigger